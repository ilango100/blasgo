package blasgo

import "testing"

func TestSGER(t *testing.T) {
	mat := make([]float32, len(a)*len(b))
	SGER(RowMajor, len(a), len(b), 1.2, a, 1, b, 1, mat, 10)

	res := []float32{
		12.0, 10.8, 9.6, 8.4, 7.2, 6.0, 4.8, 3.6, 2.4, 1.2,
		24.0, 21.6, 19.2, 16.8, 14.4, 12.0, 9.6, 7.2, 4.8, 2.4,
		36.0, 32.4, 28.8, 25.2, 21.6, 18.0, 14.4, 10.8, 7.2, 3.6,
		48.0, 43.2, 38.4, 33.6, 28.8, 24.0, 19.2, 14.4, 9.6, 4.8,
		60.0, 54.0, 48.0, 42.0, 36.0, 30.0, 24.0, 18.0, 12.0, 6.0,
		72.0, 64.8, 57.6, 50.4, 43.2, 36.0, 28.8, 21.6, 14.4, 7.2,
		84.0, 75.6, 67.2, 58.8, 50.4, 42.0, 33.6, 25.2, 16.8, 8.4,
		96.0, 86.4, 76.8, 67.2, 57.6, 48.0, 38.4, 28.8, 19.2, 9.6,
		108.0, 97.2, 86.4, 75.6, 64.8, 54.0, 43.2, 32.4, 21.6, 10.8,
		120.0, 108.0, 96.0, 84.0, 72.0, 60.0, 48.0, 36.0, 24.0, 12.0,
	}
	if !compareSlices32(mat, res) {
		t.Errorf("SGER: Expected %v, got %v", res, mat)
	}
	t.Logf("SGER Result: %v", mat)
}

func TestDGER(t *testing.T) {
	mat := make([]float64, len(a)*len(b))
	DGER(RowMajor, len(a), len(b), 1.2, aa, 1, bb, 1, mat, len(a))

	res := []float64{
		12.0, 10.8, 9.6, 8.4, 7.2, 6.0, 4.8, 3.6, 2.4, 1.2,
		24.0, 21.6, 19.2, 16.8, 14.4, 12.0, 9.6, 7.2, 4.8, 2.4,
		36.0, 32.4, 28.8, 25.2, 21.6, 18.0, 14.4, 10.8, 7.2, 3.6,
		48.0, 43.2, 38.4, 33.6, 28.8, 24.0, 19.2, 14.4, 9.6, 4.8,
		60.0, 54.0, 48.0, 42.0, 36.0, 30.0, 24.0, 18.0, 12.0, 6.0,
		72.0, 64.8, 57.6, 50.4, 43.2, 36.0, 28.8, 21.6, 14.4, 7.2,
		84.0, 75.6, 67.2, 58.8, 50.4, 42.0, 33.6, 25.2, 16.8, 8.4,
		96.0, 86.4, 76.8, 67.2, 57.6, 48.0, 38.4, 28.8, 19.2, 9.6,
		108.0, 97.2, 86.4, 75.6, 64.8, 54.0, 43.2, 32.4, 21.6, 10.8,
		120.0, 108.0, 96.0, 84.0, 72.0, 60.0, 48.0, 36.0, 24.0, 12.0,
	}
	if !compareSlices64(mat, res) {
		t.Errorf("DGER: Expected %v, got %v", res, mat)
	}
	t.Logf("DGER Result: %v", mat)
}

func TestCGERU(t *testing.T) {
	mat := make([]complex64, len(c)*len(d))
	CGERU(RowMajor, len(c), len(d), 1.2+2.3i, c, 1, d, 1, mat, len(c))

	res := []complex64{
		-77.6 + 8.3i, -61.4 + 5.7i, -45.2 + 3.1i, -29. + 0.5i,
		-12.8 - 2.1i, -167.4 + 49.3i, -132.8 + 37.1i, -98.2 + 24.9i,
		-63.6 + 12.7i, -29. + 0.5i, -257.2 + 90.3i, -204.2 + 68.5i,
		-151.2 + 46.7i, -98.2 + 24.9i, -45.2 + 3.1i, -347. + 131.3i,
		-275.6 + 99.9i, -204.2 + 68.5i, -132.8 + 37.1i, -61.4 + 5.7i,
		-436.8 + 172.3i, -347. + 131.3i, -257.2 + 90.3i, -167.4 + 49.3i,
		-77.6 + 8.3i,
	}
	if !compareSlicesC64(mat, res) {
		t.Errorf("CGERU: Expected %v, got %v", res, mat)
	}
	t.Logf("CGERU Result: %v", mat)
}

func TestZGERU(t *testing.T) {
	mat := make([]complex128, len(cc)*len(dd))
	ZGERU(RowMajor, len(cc), len(dd), 1.2+2.3i, cc, 1, dd, 1, mat, len(cc))

	res := []complex128{
		-77.6 + 8.3i, -61.4 + 5.7i, -45.2 + 3.1i, -29. + 0.5i,
		-12.8 - 2.1i, -167.4 + 49.3i, -132.8 + 37.1i, -98.2 + 24.9i,
		-63.6 + 12.7i, -29. + 0.5i, -257.2 + 90.3i, -204.2 + 68.5i,
		-151.2 + 46.7i, -98.2 + 24.9i, -45.2 + 3.1i, -347. + 131.3i,
		-275.6 + 99.9i, -204.2 + 68.5i, -132.8 + 37.1i, -61.4 + 5.7i,
		-436.8 + 172.3i, -347. + 131.3i, -257.2 + 90.3i, -167.4 + 49.3i,
		-77.6 + 8.3i,
	}
	if !compareSlicesC128(mat, res) {
		t.Errorf("ZGERU: Expected %v, got %v", res, mat)
	}
	t.Logf("ZGERU Result: %v", mat)
}

func TestCGERC(t *testing.T) {
	mat := make([]complex64, len(c)*len(d))
	CGERC(RowMajor, len(c), len(d), 1.2+2.3i, c, 1, d, 1, mat, len(c))

	res := []complex64{
		16.4 + 76.3i, 13.8 + 60.1i, 11.2 + 43.9i, 8.6 + 27.7i,
		6. + 11.5i, 66.6 + 161.3i, 54.4 + 126.7i, 42.2 + 92.1i,
		30. + 57.5i, 17.8 + 22.9i, 116.8 + 246.3i, 95. + 193.3i,
		73.2 + 140.3i, 51.4 + 87.3i, 29.6 + 34.3i, 167. + 331.3i,
		135.6 + 259.9i, 104.2 + 188.5i, 72.8 + 117.1i, 41.4 + 45.7i,
		217.2 + 416.3i, 176.2 + 326.5i, 135.2 + 236.7i, 94.2 + 146.9i,
		53.2 + 57.1i,
	}
	if !compareSlicesC64(mat, res) {
		t.Errorf("CGERC: Expected %v, got %v", res, mat)
	}
	t.Logf("CGERC Result: %v", mat)
}

func TestZGERC(t *testing.T) {
	mat := make([]complex128, len(cc)*len(dd))
	ZGERC(RowMajor, len(cc), len(dd), 1.2+2.3i, cc, 1, dd, 1, mat, len(cc))

	res := []complex128{
		16.4 + 76.3i, 13.8 + 60.1i, 11.2 + 43.9i, 8.6 + 27.7i,
		6. + 11.5i, 66.6 + 161.3i, 54.4 + 126.7i, 42.2 + 92.1i,
		30. + 57.5i, 17.8 + 22.9i, 116.8 + 246.3i, 95. + 193.3i,
		73.2 + 140.3i, 51.4 + 87.3i, 29.6 + 34.3i, 167. + 331.3i,
		135.6 + 259.9i, 104.2 + 188.5i, 72.8 + 117.1i, 41.4 + 45.7i,
		217.2 + 416.3i, 176.2 + 326.5i, 135.2 + 236.7i, 94.2 + 146.9i,
		53.2 + 57.1i,
	}
	if !compareSlicesC128(mat, res) {
		t.Errorf("ZGERC: Expected %v, got %v", res, mat)
	}
	t.Logf("ZGERC Result: %v", mat)
}
